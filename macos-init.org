* General configuration
** Manual installation
Some packages are controlled by ~use-package~, some others don't. These need to be installed to run this configuration file properly. They are listed below:
+ ~crux~
+ ~spaceline~
+ ~org-bullets~
+ ~spaceline~

** GC size increment to speed up startup.
Increasing size of garbage collector speed up startup time about 1s in my macbook air 2015 (i7+8GB). Not tested yet in my main machine (Manjaro i7(4700)+16GB).
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 10000000)
#+END_SRC

** Personal info.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Fernando López")
(setq user-mail-address "fernandolopezlaso@gmail.com")
(setq init-dir (file-name-directory (or load-file-name (buffer-file-name))))
#+END_SRC

** PATH definition
Here we set path values for ~Miniconda~ and whatever other package system we use. Formerly i used ~SDKman~ in /MacOS/, now /brew/ is enough for me.
#+BEGIN_SRC emacs-lisp
  ;; (setenv "PATH" (concat (getenv "PATH") ":/Users/nando/miniconda3/bin"))
  ;; (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
  ;; (setenv "PATH" (concat (getenv "PATH") ":/Users/nando/.local/bin"))
  ;; (setenv "PAHT" (concat (getenv "PATH") ":/Users/nando/bin"))
  ;; (setenv "PATH" (concat (getenv "PATH") ":/usr/local/opt/openjdk@11/bin"))
  (setenv "JAVA_HOME" "/usr/local/opt/openjdk@11")

  ;; (setq exec-path (append exec-path '("/Users/nando/miniconda3/bin")))
  (setq exec-path (append exec-path '("/Users/nando/.local/bin"))) ;; Esto me ha hecho que funcione el linting en elpy
  (setq exec-path (append exec-path '("/usr/local/bin")))
  (setq exec-path (append exec-path '("/Users/nando/bin")))
  ;; (setq exec-path (append exec-path '("/usr/local/opt/openjdk@11/bin")))
#+END_SRC

** Repositories and mirros.
#+BEGIN_SRC emacs-lisp
(defvar gnu '("gnu" . "http://mirrors.163.com/elpa/gnu/"))
(defvar melpa '("melpa" . "https://melpa.org/packages/"))
(defvar melpa-stable '("melpa-stable" . "https://stable.melpa.org/packages/"))
(defvar org-elpa '("org" . "http://orgmode.org/elpa/"))
(setq package-archives nil)
(add-to-list 'package-archives melpa-stable t)
(add-to-list 'package-archives melpa t)
(add-to-list 'package-archives gnu t)
(add-to-list 'package-archives org-elpa t)
(package-initialize)
(unless (and (file-exists-p (concat init-dir "elpa/archives/gnu"))
             (file-exists-p (concat init-dir "elpa/archives/melpa"))
             (file-exists-p (concat init-dir "elpa/archives/melpa-stable")))
  (package-refresh-contents))
#+END_SRC

** Custom functions
*** Spelling errors in spanish and / or english.
#+BEGIN_SRC emacs-lisp
(defun spell-buffer-spanish ()
  "Buffer in spanish."
  (interactive)
  (ispell-change-dictionary "es")
  (flyspell-buffer))

(defun spell-buffer-english ()
  "Buffer in english."
  (interactive)
  (ispell-change-dictionary "en_US")
  (flyspell-buffer))
#+END_SRC

*** Functions to manage buffers
Closing every other buffers, close all and close current without asking.
#+BEGIN_SRC emacs-lisp
(defun close-all-buffers ()
  "Para eliminar todos los buffers."
  (interactive)
  (mapc 'kill-buffer (buffer-list)))

(defun kill-other-buffers ()
  "Para eliminar el resto de buffers salvo el activo."
  (interactive)
  (mapc 'kill-buffer
        (delq (current-buffer)
              (remove-if-not 'buffer-file-name (buffer-list)))))

(defun bjm/kill-this-buffer ()
  "Para matar el buffer actual."
  (interactive)
  (kill-buffer (current-buffer)))
#+END_SRC


*** Line navigation.
#+BEGIN_SRC emacs-lisp
(defun move-line (n)
  "Move the current line up or down by N lines."
  (interactive "p")
  (setq col (current-column))
  (beginning-of-line) (setq start (point))
  (end-of-line) (forward-char) (setq end (point))
  (let ((line-text (delete-and-extract-region start end)))
    (forward-line n)
    (insert line-text)
    ;; restore point to original column in moved line
    (forward-line -1)
    (forward-char col)))

(defun move-line-up (n)
  "Move the current line up by N lines."
  (interactive "p")
  (move-line (if (null n) -1 (- n))))

(defun move-line-down (n)
  "Move the current line down by N lines."
  (interactive "p")
  (move-line (if (null n) 1 n)))
#+END_SRC

*** To avoid tramp to stuck at beginning.
#+BEGIN_SRC emacs-lisp
(defun ido-remove-tramp-from-cache nil
    "Remove any TRAMP entries from `ido-dir-file-cache'.
    This stops tramp from trying to connect to remote hosts on emacs startup,
    which can be very annoying."
    (interactive)
    (setq ido-dir-file-cache
	  (cl-remove-if
	   (lambda (x)
	     (string-match "/\\(rsh\\|ssh\\|telnet\\|su\\|sudo\\|sshx\\|krlogin\\|ksu\\|rcp\\|scp\\|rsync\\|scpx\\|fcp\\|nc\\|ftp\\|smb\\|adb\\):" (car x)))
	   ido-dir-file-cache)))
#+END_SRC

** Global configuration
Hide permissions and owners to make file lists less noisy (from Xah Lee’s blog)
#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook
          (lambda ()
            (dired-hide-details-mode 1)))
#+END_SRC

Some common clean setup configuration.
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
(setq make-backup-files nil)
(setq-default indent-tabs-mode nil) ;; fuera tabs
(setq inhibit-splash-screen t)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
(setq mouse-wheel-progressive-speed nil)
(global-auto-revert-mode t) ;; To refresh buffer in we change it in other editor.
(global-hl-line-mode +1)
#+END_SRC

** GUI modifications
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)                        ;; Autocierre de paréntesis, llaves, corchetes, etc
(set-face-attribute 'default nil :height 120) ;; El valor va en 1/10pt, así que 100 será 10pt...
(setq visible-bell nil)
(tool-bar-mode -1)
(menu-bar-mode 1)
(if window-system (scroll-bar-mode -1))
#+END_SRC

Spacemacs looks. They should be in that order for working properly.
#+BEGIN_SRC emacs-lisp
  ;; (use-package spaceline
    ;; :demand t
    ;; :init
    ;; (setq powerline-default-separator 'arrow-fade)
    ;; :config
    ;; (require 'spaceline-config)
    ;; (spaceline-spacemacs-theme))
#+END_SRC

Doom-themes
#+BEGIN_SRC emacs-lisp
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled

;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each
;; theme may have their own settings.
(load-theme 'doom-dark+ t)
(doom-themes-visual-bell-config) ;; Enable flashing mode-line on errors
(doom-themes-neotree-config) ;; Enable custom neotree theme
(require 'doom-modeline)
(doom-modeline-mode 1)
#+END_SRC

Editor
#+BEGIN_SRC emacs-lisp
(setq-default show-trailing-whitespace t)
(setq-default indent-tabs-mode nil)
#+END_SRC
* Packages
** Grammar and syntaxis for human languages
*** Hunspell
#+BEGIN_SRC emacs-lisp
(setq ispell-really-hunspell t)
(setq ispell-program-name "hunspell")
(setq ispell-local-dictionary "es")
(setq ispell-local-dictionary-alist
      '(("es" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8)))

(use-package ispell
  :config
  (when (executable-find "hunspell")
    (setq-default ispell-program-name "hunspell")
    (setq ispell-really-hunspell t))
  :bind (("C-c s" . spell-buffer-spanish)
         ("C-c e" . spell-buffer-english)))
#+END_SRC

*** Grammar with language tool.
We have to download the executable for our OS.
#+BEGIN_SRC emacs-lisp
(setq langtool-java-classpath "/usr/loca/bin/languagetool:/Users/nando/Downloads/LanguageTool-4.6-stable/*"
      langtool-mother-tongue "es"
      langtool-default-language "es"
      ;; langtool-disabled-rules '("WHITESPACE_RULE"
                                ;; "EN_UNPAIRED_BRACKETS"
                                ;; "COMMA_PARENTHESIS_WHITESPACE"
                                ;; "EN_QUOTES")
)
#+END_SRC

** Projects and search and autocomplete mode.
~Ivy~ and ~Projectile~ are both a must in we want that coding in Emacs would be fast.
*** Ivy
Ivy has three components:
+ ivy     : a generic autocomplete mechanism
+ counsel : some useful emacs commands improved by ivy
+ swiper  : isearch also improved with ivy

Configuration based on that found at /daemons.it/, without some stuffs that i don't use.
#+BEGIN_SRC emacs-lisp
  (unless (require 'ivy nil 'noerror)
    (sleep-for 5))

  (use-package ivy
    :init
    (setq ivy-use-virtual-buffers t)     ;; Añade los buffers de bookmarks y de recentf
    (setq ivy-count-format "(%d/%d) ")   ;; Muestra las coincidencias con lo que se escribe y la posicion en estas
    (setq ivy-height 15)                 ;; número de resultados a mostrar
    (setq ivy-on-del-error-function nil) ;; No se sale del minibuffer si se encuentra un error
    (setq ivy-initial-inputs-alist nil)  ;; ivy mete el simbolo ^ al ejecutar algunas ordenes, así se quita
    (setq ivy-wrap t)                    ;; Dar la vuelta a los candidatos
    (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy))) ;; Que el uso de fuzzy regex se use en todo, no solo en counsel-find-file
    ;; (setq ivi-re-builders-alist '((t . ivi--regex-plus)))
    (setq ivy-re-builders-alist
          '(
            ;; (ivy-switch-buffer . ivy--regex-plus) ; plus por defecto
            ;; (read-file-name-internal . ivy--regex-plus)
            (t . ivy--regex-fuzzy)
           ))
    (setq ivy-virtual-abbreviate 'full) ;; Ver la ruta de los ficheros virtuales
    (setq ivy-use-selectable-prompt t)  ;; Seleccionar el candidato actual (C-m en vez de C-S-m)

    ;; Asegurarse de que están smex, flx
    (use-package smex :ensure t)
    (use-package flx :ensure t)

    :config (ivy-mode 1)
    :config (counsel-mode 1)
    :diminish ivy-mode
    :ensure t)

  (use-package counsel
    :config
    (setq counsel-find-file-at-point t)
    :ensure t)

  (use-package swiper
    :ensure t)
#+END_SRC

*** Projectile
For project management. Shortcuts are defined here.
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :pin melpa-stable
  :config
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (setq projectile-completion-system 'ivy)
  (setq projectile-indexing-method 'alien)
  (setq projectile-switch-project-action #'projectile-dired)
  (projectile-mode +1))
#+END_SRC

** Accesories
*** Treemacs
To show sidebuffer with projects either from projectile or git. We can use speedbar too.
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    ; Aquí van las opciones. Dejo una para saber dónde ponerlas.
    (setq treemacs-file-event-delay 4000)
    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;; (treemacs-resize-icons 44)
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)
#+END_SRC

To use treemacs icons in dired mode.
#+BEGIN_SRC emacs-lisp
(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))
#+END_SRC

*** Crux
Very useful functions from bbatsov
#+BEGIN_SRC emacs-lisp
(global-set-key [remap move-beginning-of-line] #'crux-move-beginning-of-line)
(global-set-key (kbd "C-c n") #'crux-cleanup-buffer-or-region)
(global-set-key [(shift return)] #'crux-smart-open-line)
(global-set-key [(control shift return)] #'crux-smart-open-line-above)
(global-set-key (kbd "C-x 4 t") #'crux-transpose-windows)
(global-set-key (kbd "C-c d") #'crux-duplicate-current-line-or-region)
(global-set-key (kbd "C-c I") #'crux-find-user-init-file)
(global-set-key (kbd "s-r") #'crux-recentf-find-file)
(global-set-key (kbd "C-<backspace>") #'crux-kill-line-backwards)
#+END_SRC

*** Speedbuffer
Sidebar. Simpler than treemacs, very useful with frames/folders views.
#+BEGIN_SRC emacs-lisp
(require 'sr-speedbar)
#+END_SRC

*** Visual-regexp
Allow to see regexp substitution in real-time when typing
#+BEGIN_SRC emacs-lisp
(require 'visual-regexp)
(define-key global-map (kbd "C-c r") 'vr/replace)
(define-key global-map (kbd "C-c q") 'vr/query-replace)
;; if you use multiple-cursors, this is for you:
(define-key global-map (kbd "C-c m") 'vr/mc-mark)
#+END_SRC

*** Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC

*** A lot of small packages, split them and make some explanations
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t)

(use-package multiple-cursors
  :ensure t)

(use-package aggressive-indent
  :ensure t
  :defer t
  :config
  (add-hook 'clojure-mode-hook #'aggressive-indent-mode))

(use-package highlight-parentheses
  :ensure t)

(use-package rainbow-mode
  :ensure t
  :config
  (add-hook 'prog-mode-hook #'rainbow-mode))

(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'lisp-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode))

(global-highlight-parentheses-mode)
#+END_SRC

** Writing code, text, etc.
*** Company
Completition package, almost for any language i use.
#+BEGIN_SRC emacs-lisp
(use-package company
  :defer 0.5
  :delight
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))
#+END_SRC

*** Flycheck
Syntax control
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :config
  (add-hook 'after-init-hook #'global-flycheck-mode))
#+END_SRC

*** LSP-Mode
To use with LSP protocol. Currently only used for ~C~ and ~Tide~.
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands lsp
    ;;:hook (sh-mode . lsp)) ;; Configuración para funcionar con BASH
    :init
    (setq lsp-enable-indentation nil)
    (add-hook 'sh-mode #'lsp)
    (add-hook 'c-mode-hook #'lsp)
    (add-hook 'scala-mode-hook #'lsp)
    ;; (add-hook 'scala-mode-hook #'lsp)
    :config
    (setq lsp-prefer-flymake nil) ;; Prefer using lsp-ui (flycheck) over flymake.
    (setq lsp-clients-clangd-args '("-j=4" "-background-index" "-log=error")))

  ;; Integración con otros paquetes
  (use-package lsp-ui
    :requires lsp-mode flycheck
    :commands lsp-ui-mode
    :ensure t
    :config
    (setq lsp-ui-doc-enable t
          lsp-ui-doc-use-childframe t
          lsp-ui-doc-position 'top
          lsp-ui-doc-include-signature t
          lsp-ui-sideline-enable nil
          lsp-ui-flycheck-enable t
          lsp-ui-flycheck-list-position 'right
          lsp-ui-flycheck-live-reporting t
          lsp-ui-peek-enable t
          lsp-ui-peek-list-width 60
          lsp-ui-peek-peek-height 25)
    (add-hook 'lsp-mode-hook 'lsp-ui-mode)) ; flycheck y tips en popups

  (use-package lsp-treemacs :commands lsp-treemacs-errors-list :ensure t)

  (use-package company-lsp
    :commands company-lsp
    :config (push 'company-lsp company-backends))
#+END_SRC

*** C/C++
#+BEGIN_SRC emacs-lisp
(require 'ccls)
(setq ccls-executable "/usr/local/bin/ccls")
#+END_SRC

*** TypeScript/JavaScript
~Tide~ is for ~TypeScript~ and ~Angular~,  but it works for /JavaScript/ too, and its configuration is so easy i don't won't to test anything else.
#+BEGIN_SRC emacs-lisp
(defun setup-tide-mode ()
  "Función que nos lanza el modo y lo configura.
No uso use-package, porque si lo hago así,
solamente carga el modo para el primer archivo."
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  ;;(setq tide-tsserver-process-environment '("TSS_LOG=-level verbose -file /tmp/tss.log"))
  ;;(setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  (company-mode +1))

(add-hook 'typescript-mode-hook #'setup-tide-mode)
(add-hook 'typescript-mode 'electric-pair-mode)
(add-hook 'typescript-mode '(disable-tabs 2))
(add-hook 'js-mode-hook #'setup-tide-mode)
#+END_SRC

*** Web
**** Emmet
~Emmet~ mode, for ~html~, ~php~ and ~css-ish~ files.
#+BEGIN_SRC emacs-lisp
(require 'emmet-mode)
(add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
(add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
(add-hook 'web-mode-hook 'emmet-mode)
#+END_SRC

**** Web-mode
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.php?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.s*css?\\'" . web-mode))
;; https://fransiska.github.io/emacs/2017/08/21/web-development-in-emacs
(defun custom-web-mode-hook ()
  "Hooks for Web mode."
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (set (make-local-variable 'company-backends)
       '(company-css company-web-html company-yasnippet company-files)))
(add-hook 'web-mode-hook 'custom-web-mode-hook)
(setq web-mode-enable-current-column-highlight t)
(setq web-mode-enable-current-element-highlight t)
#+END_SRC

**** Vue-mode
For vue, but actually i use VSCode for code it.
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.vue?\\'" . vue-mode))
#+END_SRC

*** Packages and config for write text in latex, markdown, org, etc
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook
               (lambda ()
                 (variable-pitch-mode 1)))

(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . light))

(set-face-attribute 'default nil :family "Monaco")
(set-face-attribute 'fixed-pitch nil :family "Monaco")
(set-face-attribute 'variable-pitch nil :family "Go Mono")

(setq org-hide-emphasis-markers t)
(setq org-bullets-bullet-list
      '("◉" "○"))
(setq org-fontify-whole-heading-line t)
(add-hook 'org-mode-hook
          (lambda ()
            (org-bullets-mode 1)
            (org-indent-mode t)))

(use-package markdown-mode
  :ensure t)
#+END_SRC

*** Clojure
Maybe my favorite programming language, even when i'm an absolute beginner and i only use it for educational reasons or toy projects.
#+BEGIN_SRC emacs-lisp
(use-package clojure-snippets
  :ensure t)
(use-package cider
  :ensure t
  :pin melpa-stable
  :init
  (setq cider-lein-command "/usr/local/bin/lein")
  :config
  (add-hook 'cider-mode-hook #'eldoc-mode)
  (setq cider-cljs-lein-repl "(do (use 'figwheel-sidecar.repl-api) (start-figwheel!) (cljs-repl))"))

;;(use-package flycheck-clojure) ;; Mejor instalarlo a mano

;; me gustan kibit y eastwood, pero me dan problemas cada cierto tiempo (que no
;; sé arreglar) así que uso joker
(require 'flycheck-joker)
(require 'flycheck-tip)
(use-package clj-refactor
  :ensure t
  :config
  (add-hook 'clojure-mode-hook (lambda ()
                                 (clj-refactor-mode 1)
                                 ;; insert keybinding setup here
                                 ))
  (cljr-add-keybindings-with-prefix "C-c C-m")
  (setq cljr-warn-on-eval nil))
#+END_SRC

*** Python
For me, ~elpy~ is the best python package. I tried some others but they don't work so fine like this.
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t)
(elpy-enable)
(setq ;;elpy-rpc-python-command "/Users/nando/miniconda3/bin/python"
      python-shell-interpreter "ipython"
      python-shell-interpreter-args "-i --simple-prompt")
(setq elpy-rpc-timeout 10)
(setenv "WORKON_HOME" "/Users/nando/miniconda3/envs")
(pyvenv-mode 1)

(require 'py-autopep8)
(add-hook 'elpy-mode-hook (lambda () (highlight-indentation-mode -1)))
(add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
(add-hook 'elpy-mode-hook 'electric-pair-mode)
#+END_SRC
*** Scala
/Ensime/ was fantastic, i hope /Metals/ gives me the same true happiness.
#+begin_src emacs-lisp
(use-package scala-mode
  :mode "\\.s\\(cala\\|bt\\)$")

(use-package sbt-mode
  :commands sbt-start sbt-command
  :config
  ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
  ;; allows using SPACE when in the minibuffer
  (substitute-key-definition
   'minibuffer-complete-word
   'self-insert-command
   minibuffer-local-completion-map)
   ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
   (setq sbt:program-options '("-Dsbt.supershell=false")))

(use-package lsp-mode
  ;; Optional - enable lsp-mode automatically in scala files
  :hook (scala-mode . lsp))
  ;; :config (setq lsp-prefer-flymake nil)))
#+end_src
** Company + Yasnippet
Here there are some functions and related keybindings to make work almost perfectly together yasnippet and company. The code comes from [[https://emacs.stackexchange.com/questions/7908/how-to-make-yasnippet-and-company-work-nicer/7925#7925][here]], with one line modification to call ivy-partial-or-done instead of minibuffer-completion. I put them here instead of in their places because it is important to be aware they are closely related.

#+BEGIN_SRC emacs-lisp
(defun check-expansion ()
  (save-excursion
    (if (looking-at "\\_>") t
      (backward-char 1)
      (if (looking-at "\\.") t
    (backward-char 1)
    (if (looking-at "->") t nil)))))

(defun do-yas-expand ()
  (let ((yas/fallback-behavior 'return-nil))
    (yas/expand)))

(defun tab-indent-or-complete ()
  (interactive)
  (cond
   ((minibufferp)
    (ivy-partial-or-done))
   (t
    (indent-for-tab-command)
    (if (or (not yas/minor-mode)
        (null (do-yas-expand)))
    (if (check-expansion)
        (progn
          (company-manual-begin)
          (if (null company-candidates)
          (progn
            (company-abort)
            (indent-for-tab-command)))))))))

(defun tab-complete-or-next-field ()
  (interactive)
  (if (or (not yas/minor-mode)
      (null (do-yas-expand)))
      (if company-candidates
      (company-complete-selection)
    (if (check-expansion)
      (progn
        (company-manual-begin)
        (if (null company-candidates)
        (progn
          (company-abort)
          (yas-next-field))))
      (yas-next-field)))))

(defun expand-snippet-or-complete-selection ()
  (interactive)
  (if (or (not yas/minor-mode)
      (null (do-yas-expand))
      (company-abort))
      (company-complete-selection)))

(defun abort-company-or-yas ()
  (interactive)
  (if (null company-candidates)
      (yas-abort-snippet)
    (company-abort)))

(global-set-key [tab] 'tab-indent-or-complete)
(global-set-key (kbd "TAB") 'tab-indent-or-complete)
(global-set-key [(control return)] 'company-complete-common)

(define-key company-active-map [tab] 'expand-snippet-or-complete-selection)
(define-key company-active-map (kbd "TAB") 'expand-snippet-or-complete-selection)

(define-key yas-minor-mode-map [tab] nil)
(define-key yas-minor-mode-map (kbd "TAB") nil)

(define-key yas-keymap [tab] 'tab-complete-or-next-field)
(define-key yas-keymap (kbd "TAB") 'tab-complete-or-next-field)
(define-key yas-keymap [(control tab)] 'yas-next-field)
(define-key yas-keymap (kbd "C-g") 'abort-company-or-yas)
#+END_SRC
* Keybindings
There are more keybindings in other places. I will try in the future to put them all in this section.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-=") 'er/expand-region)
(global-set-key (kbd "C-x k") 'bjm/kill-this-buffer)
(global-set-key (kbd "C-x C-b") 'buffer-menu)
(global-set-key (kbd "C-S-k") 'kill-whole-line)
(global-set-key (kbd "C-S-j") 'join-line)
(global-set-key (kbd "C-x f") 'flycheck-list-errors)
(global-set-key (kbd "C-x C-g") 'delete-trailing-whitespace)
(global-unset-key (kbd "C-x o")) ;; Desconecto binding original para 'other-window'
(global-set-key (kbd "C-,") #'other-window)
(global-set-key (kbd "C-.") (lambda ()
                              (interactive)
                              (other-window -1)))
(global-set-key (kbd "C-q") 'comment-line)
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
;; mc -> multiple-cursors
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C->") 'mc/mark-all-like-this)
(global-set-key (kbd "M-<up>") 'move-line-up)
(global-set-key (kbd "M-<down>") 'move-line-down)
;; undo and redo
(global-set-key (kbd "C-z") 'advertised-undo)
(defalias 'redo 'undo-tree-redo)
(global-set-key (kbd "C-S-z") 'redo)
(define-key global-map [f4] 'toggle-truncate-lines)
(define-key global-map [f5] 'tool-bar-mode)
(define-key global-map [f6] 'menu-bar-mode)
(define-key global-map [f8] 'align-regexp)
(define-key global-map [f9] 'sort-lines)
(global-set-key (kbd "<f11>") 'global-linum-mode)
;; ivy's shortcuts
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
#+END_SRC
