. ~/.profile_private
function watch_folder_and_exec_function {
    [[ $# == 0 ]] && echo "La función necesita qué ha de ejecutar cuando los archivos cambien\n" && return

    echo "ejecutamos:      $@"
    while inotifywait -r -e modify,create,move,delete --exclude '(.git|#.*)' ./; do
        eval $@
        echo "\n"
    done
}

function upload_folder {
    src=$1
    dst=$2

    if [[ $src == '-h' ]]; then
        echo "2 parámetros posicionales obligatorios:"
        echo "  - ruta local a subir"
        echo "  - ruta servidor donde subir"
        echo "2 opciones:"
        echo "  - -e archivo con listado a excluir"
        echo "  - -s proveedor donde se encuentra servidor remoto."
        return
    fi

    while [[ -n $1 ]]; do
        case "$1" in
            -e)
                local exclude_file=$2
                shift
                ;;
            -s)
                local server=$2
                shift
                ;;
        esac
        shift
    done

    if [[ -z $server ]]; then
        local server=$(echo "contabo\naws\novh\nclouding" | fzf)
    fi

    case $server in
        "contabo")
            local dict=${contabo}
            local ip=${contabo[ip]}
            local port=${contabo[port]}
            local user=${contabo[user]}
            ;;
    esac

    if [[ -z $exclude_file ]]; then
        echo "[BASH COMMAND] rsync -avzP -e \"ssh -p $port\" $src $user@$ip:$dst"
        rsync -avzP -e "ssh -p $port" $src $user@$ip:$dst
    else
        echo "[BASH COMMAND] rsync -avzP -e \"ssh -p $port\" --exclude-from=\"$src$exclude_file\" $src $user@$ip:$dst"
        rsync -avzP -e "ssh -p $port" --exclude-from="$src$exclude_file" $src $user@$ip:$dst
    fi
}

function watch_and_upload {
    [[ $# != 3 ]] && echo "La función necesita tres parámetros:\n  - directorio local\n  - directorio remoto\n  - nombre del archivo en directorio local con elementos a excluir de la sincronización" && return
    # rsync flags
    #     a => archive mode == rlptgoD (recursivo, conserva permisos, enlaces simbólicos, etc)
    #     v => verbose
    #     z => compress
    #     P => progress
    # inotifywait flags
    #     m => eschucar continuamente
    #     e => eventos a escuchar
    # inotifywait -r -m -e modify,create,move,delete $1 | while read file; do
    echo "origen: $1"
    echo "destino: $2"
    echo "excluimos:" && cat $1/$3
    # Primera subida nada más lanzarlo.
    rsync -avzP --exclude-from="$1$3" -e "ssh -p 6573" $1 nando@194.163.137.6:$2
    while inotifywait -r -e modify,create,move,delete --exclude '.git' $1; do
        rsync -avzP --exclude-from="$1$3" -e "ssh -p 6573" $1 nando@194.163.137.6:$2
        echo "echo"
    done
}

function gac {
    [[ $# != 1 ]] && echo 'Hay que pasarle el mensaje del commit a la función.' && return

    git status
    git add .
    git commit -m $1

    echo "===>>> Commit realizado."
}

function gacp {
    echo "3 formas de invocar"
    echo "gacp mensaje-commit                                 === gacp mensaje-commit origin master"
    echo "gacp mensaje-commit rama-a-subir                    === gacp mensaje-commit origin rama-a-subir"
    echo "gacp mensaje-commit repositorio-remoto rama-a-subir"
    echo ""

    [[ $# == 1 ]] && gac $1 && echo "===>>> Subiendo rama master al repositorio origin."  && git push origin master && return

    [[ $# == 2 ]] && gac $1 && echo "===>>> Subiendo rama $2 al repositorio origin."      && git push origin $2     && return

    [[ $# != 3 ]] && echo "Hace falta mensaje de commit, rama que subir y repositorio al que subir." && return

    echo "===>>> Subiendo rama $3 al repositorio $2." &&

    gac $1
    git push $2 $3
}
